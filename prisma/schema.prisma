datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["extendedWhereUnique"]
}

model User {
  id                  Int                  @id @default(autoincrement())
  image               String
  username            String               @unique
  password            String
  email               String               @unique
  firstName           String?              @map("first_name")
  lastName            String?              @map("last_name")
  createdAt           DateTime             @default(now()) @map("created_at")
  isAdmin             Boolean              @default(false) @map("is_admin")
  verified            Boolean              @default(false)
  author              Author?
  accountVerification AccountVerification?

  @@map("users")
}

model AccountVerification {
  id     Int    @id @default(autoincrement())
  code   String
  userId Int    @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account_verifications")
}

model Author {
  id          Int     @id @default(autoincrement())
  description String?
  userId      Int     @unique @map("user_id")
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]

  @@map("authors")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]

  @@map("tags")
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String     @unique
  parentCategoryId Int?       @map("parent_category_id")
  parentCategory   Category?  @relation("ParentCategoriesSubcategories", fields: [parentCategoryId], references: [id], onDelete: Cascade)
  subcategories    Category[] @relation("ParentCategoriesSubcategories")
  posts            Post[]

  @@map("categories")
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  postId  Int    @map("post_id")
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PostExtraImage {
  id     Int    @id @default(autoincrement())
  image  String
  postId Int    @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_extra_images")
}

model Post {
  id          Int              @id @default(autoincrement())
  image       String
  title       String
  content     String
  authorId    Int              @map("author_id")
  categoryId  Int              @map("category_id")
  isDraft     Boolean          @map("is_draft")
  createdAt   DateTime         @default(now()) @map("created_at")
  author      Author           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    Category         @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  tags        Tag[]
  comments    Comment[]
  extraImages PostExtraImage[]

  @@map("posts")
}
